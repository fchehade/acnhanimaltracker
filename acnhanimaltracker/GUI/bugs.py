from tkinter import ttk
from PIL import ImageTk, Image

LARGE_FONT = ("Verdana", 14)


class BugPage(ttk.Treeview):
    """The BugPage lists all bug-type animals from the game.
    Every animal you can catch with a net is in this list.

    Args:
        parent (ttk.Frame):  The container frame from Application.
        controller (Applicatio): The Application itself.
    """

    def __init__(self, parent: ttk.Frame, controller):
        super().__init__(parent)
        self.s = ttk.Style()
        self.s.configure(
            "Treeview", rowheight=200, highlightbackground="blue", highlightthickness=20
        )

        columns = ("Bug", "ID")
        self.config(columns=columns)
        self.column("Bug", width=400, anchor="w")
        self.column("ID", width=15, anchor="center")
        self.heading("Bug", text="Bug - Information")
        self.heading("ID", text="Bug - ID")
        self.animals_dict = {}

        for index, i in enumerate(range(80), start=1):
            png = Image.open(f"{controller.animal_list[1][i].image_path}")
            png = self.resize_image(png)
            png = ImageTk.PhotoImage(png)
            self.animals_dict[index] = [
                controller.animal_list[1][i],
                controller.animal_list[1][i].caught,
                png,
                controller.animal_list[1][i].id,
            ]

        self.images = {}
        for key in self.animals_dict.keys():
            self.images[key] = self.animals_dict[key][2]
        for animal in self.animals_dict.keys():
            self.insert(
                "",
                "end",
                iid=animal,
                values=[self.animals_dict[animal][0], self.animals_dict[animal][3]],
                image=self.images[animal],
                tags=str(self.animals_dict[animal][1]),
            )
        self.tag_configure("False", background="#8b0000")
        self.tag_configure("True", background="#006400")
        self.bind(
            "<ButtonRelease-1>",
            lambda event, animal_list=controller.animal_list[1]: self.select_item(
                event, animal_list
            ),
        )

    def select_item(self, _, animal_list):
        """On click of a row, changes the status of a animal (caught - uncaught)
        visualised by a change of color

        Args:
            _ (_type_): Event
            animal_list (list[Animal]): The animal List generated by animal_handler
        """
        curItem = self.focus()
        animal_id = int(self.item(curItem)["values"][1])
        animal_list[animal_id - 1].switch_caught_status()
        if animal_list[animal_id - 1].caught:
            self.s.map("Treeview", background=[("selected", "#006400")])
        else:
            self.s.map("Treeview", background=[("selected", "#8b0000")])
        self.tag_configure("False", background="#8b0000")
        self.tag_configure("True", background="#006400")
        self.item(str(animal_id), tags=(f"{str(animal_list[animal_id - 1].caught)}"))

    def resize_image(self, image: Image.Image):
        """Resizes an image to a specified width respecting the aspect ratio.

        Args:
            image (Image.Image): Original sized image to be resized by basewidth.

        Returns:
            Image.Image: Return a resized version of an image given
        """
        basewidth = 200
        wpercent = basewidth / float(image.size[0])
        hsize = int((float(image.size[1] * float(wpercent))))
        image = image.resize((basewidth, hsize), Image.ANTIALIAS)
        return image
